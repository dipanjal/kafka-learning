/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.poc.kafka.model.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Payment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4253318762269483036L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payment\",\"namespace\":\"com.poc.kafka.model.avro\",\"fields\":[{\"name\":\"productName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product Name\"},{\"name\":\"productId\",\"type\":\"long\",\"doc\":\"Product identifier\"},{\"name\":\"category\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product Category\"},{\"name\":\"walletId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer wallet identifier\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Payment> ENCODER =
      new BinaryMessageEncoder<Payment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payment> DECODER =
      new BinaryMessageDecoder<Payment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Payment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Payment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Payment>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Payment to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Payment from a ByteBuffer. */
  public static Payment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Product Name */
   private java.lang.String productName;
  /** Product identifier */
   private long productId;
  /** Product Category */
   private java.lang.String category;
  /** Customer wallet identifier */
   private java.lang.String walletId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payment() {}

  /**
   * All-args constructor.
   * @param productName Product Name
   * @param productId Product identifier
   * @param category Product Category
   * @param walletId Customer wallet identifier
   */
  public Payment(java.lang.String productName, java.lang.Long productId, java.lang.String category, java.lang.String walletId) {
    this.productName = productName;
    this.productId = productId;
    this.category = category;
    this.walletId = walletId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productName;
    case 1: return productId;
    case 2: return category;
    case 3: return walletId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productName = (java.lang.String)value$; break;
    case 1: productId = (java.lang.Long)value$; break;
    case 2: category = (java.lang.String)value$; break;
    case 3: walletId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'productName' field.
   * @return Product Name
   */
  public java.lang.String getProductName() {
    return productName;
  }


  /**
   * Gets the value of the 'productId' field.
   * @return Product identifier
   */
  public java.lang.Long getProductId() {
    return productId;
  }


  /**
   * Gets the value of the 'category' field.
   * @return Product Category
   */
  public java.lang.String getCategory() {
    return category;
  }


  /**
   * Gets the value of the 'walletId' field.
   * @return Customer wallet identifier
   */
  public java.lang.String getWalletId() {
    return walletId;
  }


  /**
   * Creates a new Payment RecordBuilder.
   * @return A new Payment RecordBuilder
   */
  public static com.poc.kafka.model.avro.Payment.Builder newBuilder() {
    return new com.poc.kafka.model.avro.Payment.Builder();
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payment RecordBuilder
   */
  public static com.poc.kafka.model.avro.Payment.Builder newBuilder(com.poc.kafka.model.avro.Payment.Builder other) {
    return new com.poc.kafka.model.avro.Payment.Builder(other);
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Payment instance.
   * @param other The existing instance to copy.
   * @return A new Payment RecordBuilder
   */
  public static com.poc.kafka.model.avro.Payment.Builder newBuilder(com.poc.kafka.model.avro.Payment other) {
    return new com.poc.kafka.model.avro.Payment.Builder(other);
  }

  /**
   * RecordBuilder for Payment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payment>
    implements org.apache.avro.data.RecordBuilder<Payment> {

    /** Product Name */
    private java.lang.String productName;
    /** Product identifier */
    private long productId;
    /** Product Category */
    private java.lang.String category;
    /** Customer wallet identifier */
    private java.lang.String walletId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.poc.kafka.model.avro.Payment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productName)) {
        this.productName = data().deepCopy(fields()[0].schema(), other.productName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.walletId)) {
        this.walletId = data().deepCopy(fields()[3].schema(), other.walletId);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Payment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.poc.kafka.model.avro.Payment other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.productName)) {
        this.productName = data().deepCopy(fields()[0].schema(), other.productName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.walletId)) {
        this.walletId = data().deepCopy(fields()[3].schema(), other.walletId);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'productName' field.
      * Product Name
      * @return The value.
      */
    public java.lang.String getProductName() {
      return productName;
    }

    /**
      * Sets the value of the 'productName' field.
      * Product Name
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder setProductName(java.lang.String value) {
      validate(fields()[0], value);
      this.productName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * Product Name
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productName' field.
      * Product Name
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * Product identifier
      * @return The value.
      */
    public java.lang.Long getProductId() {
      return productId;
    }

    /**
      * Sets the value of the 'productId' field.
      * Product identifier
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder setProductId(long value) {
      validate(fields()[1], value);
      this.productId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * Product identifier
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productId' field.
      * Product identifier
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder clearProductId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * Product Category
      * @return The value.
      */
    public java.lang.String getCategory() {
      return category;
    }

    /**
      * Sets the value of the 'category' field.
      * Product Category
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder setCategory(java.lang.String value) {
      validate(fields()[2], value);
      this.category = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * Product Category
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'category' field.
      * Product Category
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder clearCategory() {
      category = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'walletId' field.
      * Customer wallet identifier
      * @return The value.
      */
    public java.lang.String getWalletId() {
      return walletId;
    }

    /**
      * Sets the value of the 'walletId' field.
      * Customer wallet identifier
      * @param value The value of 'walletId'.
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder setWalletId(java.lang.String value) {
      validate(fields()[3], value);
      this.walletId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'walletId' field has been set.
      * Customer wallet identifier
      * @return True if the 'walletId' field has been set, false otherwise.
      */
    public boolean hasWalletId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'walletId' field.
      * Customer wallet identifier
      * @return This builder.
      */
    public com.poc.kafka.model.avro.Payment.Builder clearWalletId() {
      walletId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payment build() {
      try {
        Payment record = new Payment();
        record.productName = fieldSetFlags()[0] ? this.productName : (java.lang.String) defaultValue(fields()[0]);
        record.productId = fieldSetFlags()[1] ? this.productId : (java.lang.Long) defaultValue(fields()[1]);
        record.category = fieldSetFlags()[2] ? this.category : (java.lang.String) defaultValue(fields()[2]);
        record.walletId = fieldSetFlags()[3] ? this.walletId : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payment>
    READER$ = (org.apache.avro.io.DatumReader<Payment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
